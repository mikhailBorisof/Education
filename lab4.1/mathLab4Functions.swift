//
//  mathLab4Functions.swift
//  lab4.1
//
//  Created by misha on 04.06.2022.
//
/*    --------------------------------------------------------    */
import Foundation
/** –í—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω—ã—Ö x –∏ N */
func f(_ x  : Double) -> Double {
    var sum:Double = 0
    sum += 0.25 * pow(x , 2.0)
    sum += 0.1 * x
    sum -= 0.8 * sqrt(Double(N!))
    sum += Double(N!) * (pow(sin( 2*x ), 4.0))
    sum += Double(N!) * pow(cos(x), 4.0)
    return sum
}
/** –í—ã—á–∏—Å–ª—è–µ—Ç  –∏ –≤—ã–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ [a,b] —Å –∑–∞–¥–∞–Ω–Ω—ã–º —à–∞–≥–æ–º h */
func funcValuesOnSegment() {
    var x: Double = limit_a // –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
    /* ----------- –ë–ª–æ–∫ –≤—ã–≤–æ–¥–∞ —à–∞–ø–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ---------- */
    print(" |-------------|---------------|")
    print(" |      X      |      F(X)     |")
    print(" |-------------|---------------|")
    while (x <= limit_b) {
        /* ----------- –ë–ª–æ–∫ –≤—ã–≤–æ–¥–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã ---------- */
        let F:Double = f(x)
        if x < 0  && F > 0 {
            print(" |   \(NSString(format:"%.3f", x))    |     \(NSString(format:"%.3f",F ))     |")// NSString - –∫–ª–∞—Å—Å –æ–±–µ—Ä—Ç–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –º–µ—Ç–æ–¥—ã –∏–∑–º–∏–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
        }
        if x < 0 && F < 0 {
            print(" |   \(NSString(format:"%.3f", x))    |    \(NSString(format:"%.3f", F ))     |")// NSString - –∫–ª–∞—Å—Å –æ–±–µ—Ä—Ç–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –º–µ—Ç–æ–¥—ã –∏–∑–º–∏–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
        }
        if x > 0 && F > 0 {
            print(" |    \(NSString(format:"%.3f", x))    |     \(NSString(format:"%.3f", F ))     |")// NSString - –∫–ª–∞—Å—Å –æ–±–µ—Ä—Ç–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –º–µ—Ç–æ–¥—ã –∏–∑–º–∏–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
        }
        if x > 0 && F < 0 {
            print(" |    \(NSString(format:"%.3f", x))    |    \(NSString(format:"%.3f", F ))     |")// NSString - –∫–ª–∞—Å—Å –æ–±–µ—Ä—Ç–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –º–µ—Ç–æ–¥—ã –∏–∑–º–∏–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
        }
        x += H // –¥–æ–±–∞–≤–ª—è–µ–º —à–∞–≥
    }
    print(" |-------------|---------------|")
}
/** –í—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä–Ω—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –º–µ—Ç–æ–¥–æ–º –¥–∏—Ö–æ—Ç–æ–º–∏–∏ */
func dichotomyMethod(x : Double, delta : Double) -> Double {
    // –ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–æ—Ä–µ–Ω—å,
    // –µ—Å–ª–∏ –º–µ–∂–¥—É –ª–µ–≤—ã–º –∏ –ø—Ä–∞–≤—ã–º –∫—Ä–∞–µ–º –µ—Å—Ç—å –∫–æ—Ä–µ–Ω—å, —Ç–æ
    // –ø–æ–ª—É—á–∏–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    // –ü–æ—Ç–æ–º —Å—É–∂–∞–µ–º –æ–±–ª–∞—Ç—å –ø–æ–∏—Å–∫–∞,
    // –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –º–µ–Ω—å—à–µ —ç–ø—Å–∏–ª–æ–Ω
    let eps:Double = 0.0001 // —ç–ø—Å–∏–ª–æ–Ω
    var a:Double = x // –ª–µ–≤—ã–π –∫—Ä–∞–π
    var b:Double = x + delta // –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π
    var c:Double = 0 // —Å–µ—Ä–µ–¥–∏–Ω–∞ –æ—Ç—Ä–µ–∑–∫–∞
    repeat {
        c = (a + b) / 2
        if (f(c) == 0) { return c }// –Ω–∞—à–ª–∏ –∫–æ—Ä–µ–Ω—å , –∫–æ—Ç–æ—Ä—ã–π –∏—Å–∫–∞–ª–∏
        if (f(a) * f(c) < 0) { b = c } // –≤—ã–±—Ä–∞–ª–∏ –ª–µ–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É
        else if (f(b) * f(c) < 0){ a = c } // –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É

    } while (f(c) > eps)
    return c
}
/**  –ò—â–µ—Ç –∫–æ—Ä–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –¥–∏—Ö–æ—Ç–æ–º–∏–∏  */
func findRootsDichotomyMethod() {
    roots = [] // –æ–±–Ω—É–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∫–æ—Ä–Ω–µ–π, –¥–ª—è –Ω–æ–≤—ã—Ö N
    let delta: Double = 0.0001
    var x: Double = limit_a // –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
    while (x <= limit_b) {
        // –∫–æ—Ä–Ω–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–≤–µ–µ–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ
        if f(x) * f(x + delta) < 0 {
            roots.append(dichotomyMethod(x: x, delta: delta))
        }
        x += delta
    }
}
/**  –í—ã–≤–æ–¥–∏—Ç –∫–æ—Ä–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –¥–∏—Ö–æ—Ç–æ–º–∏–∏  */
func showRootsDichotomyMethod() {
    if roots.isEmpty { findRootsDichotomyMethod() } // –±–µ–∑ –∫–æ—Ä–Ω–µ–π –∫–æ—Ä–Ω–∏ –≤—ã–≤–µ—Å—Ç–∏ –Ω–µ –≤—ã–π–¥–µ—Ç
    /* ----------- –ë–ª–æ–∫ –≤—ã–≤–æ–¥–∞ —à–∞–ø–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ---------- */
    print(" |-------------|---------------|")
    print(" | –ù–æ–º–µ—Ä –∫–æ—Ä–Ω—è |     –ö–æ—Ä–µ–Ω—å    |")
    print(" |-------------|---------------|")
    var rootNumber: Int = 0
    while rootNumber < roots.count  {
        /* ----------- –ë–ª–æ–∫ –≤—ã–≤–æ–¥–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã ---------- */
        if roots[rootNumber] < 0 {
            print(" |      \(NSString(format:"%.i", rootNumber+1))      |    \(NSString(format:"%.3f", roots[rootNumber] ))     |")// NSString - –∫–ª–∞—Å—Å –æ–±–µ—Ä—Ç–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –º–µ—Ç–æ–¥—ã –∏–∑–º–∏–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
        }
        else {
            print(" |      \(NSString(format:"%.i", rootNumber+1))      |     \(NSString(format:"%.3f", roots[rootNumber] ))     |")// NSString - –∫–ª–∞—Å—Å –æ–±–µ—Ä—Ç–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –º–µ—Ç–æ–¥—ã –∏–∑–º–∏–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
        }
        rootNumber += 1
    } // –∫–æ–Ω–µ—Ü while
    print(" |-------------|---------------|")
} // –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏
/**  –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é –≤ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ */
func derivative(_ a: Double) -> Double {
    let dx:Double = 0.01  // –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏—è
    return (f(a + dx) - f(a)) / dx  // –ø–æ –æ–ø—Ä–µ–ª–µ–Ω–∏—é
}
/** –í—ã–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤ */
func countExtrema() {
    var extremaCounter: Int = 0
    let delta: Double = 0.001 
    var x: Double = limit_a // –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
    while (x <= limit_b) {
        // –≥–¥–µ - —Ç–æ –ø–µ—Ä–µ—à–ª–∏ —á–µ—Ä–µ–∑ –Ω–æ–ª—å - > –µ—Å—Ç—å —ç–∫—Å—Ç—Ä–µ–º—É–º
        if (derivative(x) * derivative(x + delta) < 0) { extremaCounter += 1 }
        x += delta
    }
    print(" –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: \(extremaCounter)")
}
/** –í—ã—á–∏—Å–ª—è–µ—Ç  –∏ –≤—ã–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞, –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –º–µ—Ç–æ–¥–æ–º  –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ */
func rectanglesIntegrationMethod() {
    // –≥—Ä–∞–Ω–∏—Ü–∞ –∑–∞–¥–∞–µ—Ç—Å—è –∫–æ—Ä–Ω—è–º–∏
    var a: Double = 0
    var b: Double = 0

    if roots.count > 2 {
        a = roots[1]
        b = roots[2]
    } else {
        if roots.count == 2 {
            a = roots[0]
            b = roots[1]
        } else { print(" üõë –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≥–∏—Ä–æ–≤–∞–Ω–∏—è \n") }
    }

    let n:Int = 1000 // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Å–æ—á–∫–æ–≤
    let h: Double = (b - a) / Double(n) // —Ä–∞—Å—á–µ—Ç —à–∞–≥–∞
    var integral: Double = 0 // –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞
    var nomerKusochka:Int = 0
    while (nomerKusochka < n) {
        // —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
        integral += h * f(a + Double(nomerKusochka)*h)
        nomerKusochka += 1
    }
    print(" –ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞\n –º–µ–∂–¥—É 2 –∏ 3 –∫–æ—Ä–Ω–µ–º\n –º–µ—Ç–æ–¥–æ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤: \(NSString(format:"%.4f",integral))")
}
/** –í—ã—á–∏—Å–ª—è–µ—Ç  –∏ –≤—ã–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞, –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –º–µ—Ç–æ–¥–æ–º —Ç—Ä–∞–ø–µ—Ü–µ–π */
func trapeziumIntegrationMethod () {
    // –≥—Ä–∞–Ω–∏—Ü–∞ –∑–∞–¥–∞–µ—Ç—Å—è –∫–æ—Ä–Ω—è–º–∏
    var a: Double = 0
    var b: Double = 0
    if (roots.count > 2) {
        a = roots[1]
        b = roots[2]
    } else {
        if roots.count == 2 {
            a = roots[0]
            b = roots[1]
        } else { print(" üõë –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≥–∏—Ä–æ–≤–∞–Ω–∏—è \n") }
    }

    let n:Int = 1000 // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Å–æ—á–∫–æ–≤
    let h: Double = (b - a) / Double(n)  // —à–∞–≥
    var sum:Double = 0 //
    var nomerKusochka:Int = 0
    while (nomerKusochka < n-1) { // n - —á–ª–µ–Ω —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∏–∂–µ –≤ —Ñ–æ—Ä–º—É–ª–µ –≤ –≤–∏–¥–µ f(b)
        // —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
        sum += f(a + Double(nomerKusochka)*h)
        nomerKusochka += 1
    }
    let integral: Double = h/2 * (f(a) + 2*sum + f(b))
    print(" –ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞\n –º–µ–∂–¥—É 2 –∏ 3 –∫–æ—Ä–Ω–µ–º\n –º–µ—Ç–æ–¥–æ–º —Ç—Ä–∞–ø–µ—Ü–µ–π:        \(NSString(format:"%.4f",integral))")
}
/** –í—ã—á–∏—Å–ª—è–µ—Ç  –∏ –≤—ã–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞, –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –º–µ—Ç–æ–¥–æ–º –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ */
func monteCarloIntegrationMethod() {
    /*
     –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ —á–∏—Å–ª–∞, –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è,
     –Ω–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
     */
    var a: Double = 0
    var b: Double = 0
    if (roots.count > 2) {
        a = roots[1]
        b = roots[2]
    } else {
        if roots.count == 2 {
            a = roots[0]
            b = roots[1]
        } else { print(" üõë –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≥–∏—Ä–æ–≤–∞–Ω–∏—è \n") }
    }
   
    var sum:Double = 0
    print()
    let n: Int = enter_n()  // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    print()
    // —á–µ–º –±–æ–ª—å—à–µ —Ç–µ–º —Ç–æ—á–Ω–µ–µ
    var nomerKusochka:Int = 0
    var rng = SystemRandomNumberGenerator()
    while (nomerKusochka <= n) {
        /* —Ö–æ—Ç–∏–º —á–∏—Å–ª–∞ –æ—Ç –ª–µ–≤–æ–≥–æ –¥–æ –ø—Ä–∞–≤–æ–≥–æ –∫–æ—Ä–Ω—è [a,b] */
        sum += f(Double.random(in: a...b, using: &rng))
        // —Å–º–æ—Ç—Ä–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–π —Ç–æ—á–∫–µ –∏–∑ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞
        nomerKusochka += 1
    }
    print(" –ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞\n –º–µ–∂–¥—É 2 –∏ 3 –∫–æ—Ä–Ω–µ–º\n –º–µ—Ç–æ–¥–æ–º –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ:     \(NSString(format:"%.4f",((b-a)*sum/Double(n)) )) ") // —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–∏—Ç–∏—á–µ—Å–∫–æ–µ
}
/** –§—É–Ω–∫—Ü–∏—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ n –¥–ª—è –º–µ—Ç–æ–¥–∞ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ*/
func enter_n() -> Int {
    var n: Int? = 0
    repeat{
        print(" –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ n –¥–ª—è –∑–∞–¥–∞–Ω–∏—è\n —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–º –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ\n –æ—Ç 100 –¥–æ 2000 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ")
        n = Optional (enterNumberUnsignedInt())
        
        if n! < 100 || n! > 2000 {
            print(" ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 100 –¥–æ 2000 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!")
            n = nil
        }
    } while n == nil // –µ—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞
    return n!
}
/*    ---------------------------------------    */
